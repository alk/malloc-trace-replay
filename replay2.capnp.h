// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: replay2.capnp

#ifndef CAPNP_INCLUDED_e5f4176bd4f65e15_
#define CAPNP_INCLUDED_e5f4176bd4f65e15_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dd4c380c534c12c7);
CAPNP_DECLARE_SCHEMA(bf25c4c72a3e1acc);
CAPNP_DECLARE_SCHEMA(b506b6c78f94928c);
CAPNP_DECLARE_SCHEMA(88766922f6704980);
CAPNP_DECLARE_SCHEMA(d4853fd2610d36c3);
CAPNP_DECLARE_SCHEMA(ecf4c7b823cc6dc1);
CAPNP_DECLARE_SCHEMA(c12122cf73a297db);
CAPNP_DECLARE_SCHEMA(bd26a88901ff3b3f);
CAPNP_DECLARE_SCHEMA(cae04fe26109eafb);

}  // namespace schemas
}  // namespace capnp

namespace replay {

struct Malloc {
  Malloc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd4c380c534c12c7, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Free {
  Free() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf25c4c72a3e1acc, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Memalign {
  Memalign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b506b6c78f94928c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Realloc {
  Realloc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88766922f6704980, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FreeSized {
  FreeSized() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4853fd2610d36c3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct KillThread {
  KillThread() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ecf4c7b823cc6dc1, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwitchThread {
  SwitchThread() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c12122cf73a297db, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Instruction {
  Instruction() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MALLOC,
    FREE,
    MEMALIGN,
    REALLOC,
    FREE_SIZED,
    KILL_THREAD,
    SWITCH_THREAD,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd26a88901ff3b3f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Batch {
  Batch() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cae04fe26109eafb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Malloc::Reader {
public:
  typedef Malloc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Malloc::Builder {
public:
  typedef Malloc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg();
  inline void setReg( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Malloc::Pipeline {
public:
  typedef Malloc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Free::Reader {
public:
  typedef Free Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Free::Builder {
public:
  typedef Free Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg();
  inline void setReg( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Free::Pipeline {
public:
  typedef Free Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Memalign::Reader {
public:
  typedef Memalign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getAlignment() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Memalign::Builder {
public:
  typedef Memalign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg();
  inline void setReg( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getAlignment();
  inline void setAlignment( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Memalign::Pipeline {
public:
  typedef Memalign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Realloc::Reader {
public:
  typedef Realloc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOldReg() const;

  inline  ::uint64_t getNewReg() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Realloc::Builder {
public:
  typedef Realloc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOldReg();
  inline void setOldReg( ::uint64_t value);

  inline  ::uint64_t getNewReg();
  inline void setNewReg( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Realloc::Pipeline {
public:
  typedef Realloc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FreeSized::Reader {
public:
  typedef FreeSized Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FreeSized::Builder {
public:
  typedef FreeSized Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReg();
  inline void setReg( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FreeSized::Pipeline {
public:
  typedef FreeSized Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KillThread::Reader {
public:
  typedef KillThread Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KillThread::Builder {
public:
  typedef KillThread Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KillThread::Pipeline {
public:
  typedef KillThread Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwitchThread::Reader {
public:
  typedef SwitchThread Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getThreadID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwitchThread::Builder {
public:
  typedef SwitchThread Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getThreadID();
  inline void setThreadID( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwitchThread::Pipeline {
public:
  typedef SwitchThread Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Instruction::Reader {
public:
  typedef Instruction Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMalloc() const;
  inline bool hasMalloc() const;
  inline  ::replay::Malloc::Reader getMalloc() const;

  inline bool isFree() const;
  inline bool hasFree() const;
  inline  ::replay::Free::Reader getFree() const;

  inline bool isMemalign() const;
  inline bool hasMemalign() const;
  inline  ::replay::Memalign::Reader getMemalign() const;

  inline bool isRealloc() const;
  inline bool hasRealloc() const;
  inline  ::replay::Realloc::Reader getRealloc() const;

  inline bool isFreeSized() const;
  inline bool hasFreeSized() const;
  inline  ::replay::FreeSized::Reader getFreeSized() const;

  inline bool isKillThread() const;
  inline bool hasKillThread() const;
  inline  ::replay::KillThread::Reader getKillThread() const;

  inline bool isSwitchThread() const;
  inline bool hasSwitchThread() const;
  inline  ::replay::SwitchThread::Reader getSwitchThread() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Instruction::Builder {
public:
  typedef Instruction Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMalloc();
  inline bool hasMalloc();
  inline  ::replay::Malloc::Builder getMalloc();
  inline void setMalloc( ::replay::Malloc::Reader value);
  inline  ::replay::Malloc::Builder initMalloc();
  inline void adoptMalloc(::capnp::Orphan< ::replay::Malloc>&& value);
  inline ::capnp::Orphan< ::replay::Malloc> disownMalloc();

  inline bool isFree();
  inline bool hasFree();
  inline  ::replay::Free::Builder getFree();
  inline void setFree( ::replay::Free::Reader value);
  inline  ::replay::Free::Builder initFree();
  inline void adoptFree(::capnp::Orphan< ::replay::Free>&& value);
  inline ::capnp::Orphan< ::replay::Free> disownFree();

  inline bool isMemalign();
  inline bool hasMemalign();
  inline  ::replay::Memalign::Builder getMemalign();
  inline void setMemalign( ::replay::Memalign::Reader value);
  inline  ::replay::Memalign::Builder initMemalign();
  inline void adoptMemalign(::capnp::Orphan< ::replay::Memalign>&& value);
  inline ::capnp::Orphan< ::replay::Memalign> disownMemalign();

  inline bool isRealloc();
  inline bool hasRealloc();
  inline  ::replay::Realloc::Builder getRealloc();
  inline void setRealloc( ::replay::Realloc::Reader value);
  inline  ::replay::Realloc::Builder initRealloc();
  inline void adoptRealloc(::capnp::Orphan< ::replay::Realloc>&& value);
  inline ::capnp::Orphan< ::replay::Realloc> disownRealloc();

  inline bool isFreeSized();
  inline bool hasFreeSized();
  inline  ::replay::FreeSized::Builder getFreeSized();
  inline void setFreeSized( ::replay::FreeSized::Reader value);
  inline  ::replay::FreeSized::Builder initFreeSized();
  inline void adoptFreeSized(::capnp::Orphan< ::replay::FreeSized>&& value);
  inline ::capnp::Orphan< ::replay::FreeSized> disownFreeSized();

  inline bool isKillThread();
  inline bool hasKillThread();
  inline  ::replay::KillThread::Builder getKillThread();
  inline void setKillThread( ::replay::KillThread::Reader value);
  inline  ::replay::KillThread::Builder initKillThread();
  inline void adoptKillThread(::capnp::Orphan< ::replay::KillThread>&& value);
  inline ::capnp::Orphan< ::replay::KillThread> disownKillThread();

  inline bool isSwitchThread();
  inline bool hasSwitchThread();
  inline  ::replay::SwitchThread::Builder getSwitchThread();
  inline void setSwitchThread( ::replay::SwitchThread::Reader value);
  inline  ::replay::SwitchThread::Builder initSwitchThread();
  inline void adoptSwitchThread(::capnp::Orphan< ::replay::SwitchThread>&& value);
  inline ::capnp::Orphan< ::replay::SwitchThread> disownSwitchThread();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Instruction::Pipeline {
public:
  typedef Instruction Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Batch::Reader {
public:
  typedef Batch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInstructions() const;
  inline  ::capnp::List< ::replay::Instruction>::Reader getInstructions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Batch::Builder {
public:
  typedef Batch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInstructions();
  inline  ::capnp::List< ::replay::Instruction>::Builder getInstructions();
  inline void setInstructions( ::capnp::List< ::replay::Instruction>::Reader value);
  inline  ::capnp::List< ::replay::Instruction>::Builder initInstructions(unsigned int size);
  inline void adoptInstructions(::capnp::Orphan< ::capnp::List< ::replay::Instruction>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::replay::Instruction>> disownInstructions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Batch::Pipeline {
public:
  typedef Batch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t Malloc::Reader::getReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Malloc::Builder::getReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Malloc::Builder::setReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Malloc::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Malloc::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Malloc::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Free::Reader::getReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Free::Builder::getReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Free::Builder::setReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memalign::Reader::getReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memalign::Builder::getReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Memalign::Builder::setReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memalign::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memalign::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Memalign::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memalign::Reader::getAlignment() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memalign::Builder::getAlignment() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Memalign::Builder::setAlignment( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realloc::Reader::getOldReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realloc::Builder::getOldReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Realloc::Builder::setOldReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realloc::Reader::getNewReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realloc::Builder::getNewReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Realloc::Builder::setNewReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realloc::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realloc::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Realloc::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FreeSized::Reader::getReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FreeSized::Builder::getReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FreeSized::Builder::setReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FreeSized::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FreeSized::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FreeSized::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SwitchThread::Reader::getThreadID() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwitchThread::Builder::getThreadID() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwitchThread::Builder::setThreadID( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::replay::Instruction::Which Instruction::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::replay::Instruction::Which Instruction::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Instruction::Reader::isMalloc() const {
  return which() == Instruction::MALLOC;
}
inline bool Instruction::Builder::isMalloc() {
  return which() == Instruction::MALLOC;
}
inline bool Instruction::Reader::hasMalloc() const {
  if (which() != Instruction::MALLOC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasMalloc() {
  if (which() != Instruction::MALLOC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::Malloc::Reader Instruction::Reader::getMalloc() const {
  KJ_IREQUIRE((which() == Instruction::MALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Malloc>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::Malloc::Builder Instruction::Builder::getMalloc() {
  KJ_IREQUIRE((which() == Instruction::MALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Malloc>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setMalloc( ::replay::Malloc::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MALLOC);
  ::capnp::_::PointerHelpers< ::replay::Malloc>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::Malloc::Builder Instruction::Builder::initMalloc() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MALLOC);
  return ::capnp::_::PointerHelpers< ::replay::Malloc>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptMalloc(
    ::capnp::Orphan< ::replay::Malloc>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MALLOC);
  ::capnp::_::PointerHelpers< ::replay::Malloc>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::Malloc> Instruction::Builder::disownMalloc() {
  KJ_IREQUIRE((which() == Instruction::MALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Malloc>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isFree() const {
  return which() == Instruction::FREE;
}
inline bool Instruction::Builder::isFree() {
  return which() == Instruction::FREE;
}
inline bool Instruction::Reader::hasFree() const {
  if (which() != Instruction::FREE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasFree() {
  if (which() != Instruction::FREE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::Free::Reader Instruction::Reader::getFree() const {
  KJ_IREQUIRE((which() == Instruction::FREE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Free>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::Free::Builder Instruction::Builder::getFree() {
  KJ_IREQUIRE((which() == Instruction::FREE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Free>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setFree( ::replay::Free::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE);
  ::capnp::_::PointerHelpers< ::replay::Free>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::Free::Builder Instruction::Builder::initFree() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE);
  return ::capnp::_::PointerHelpers< ::replay::Free>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptFree(
    ::capnp::Orphan< ::replay::Free>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE);
  ::capnp::_::PointerHelpers< ::replay::Free>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::Free> Instruction::Builder::disownFree() {
  KJ_IREQUIRE((which() == Instruction::FREE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Free>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isMemalign() const {
  return which() == Instruction::MEMALIGN;
}
inline bool Instruction::Builder::isMemalign() {
  return which() == Instruction::MEMALIGN;
}
inline bool Instruction::Reader::hasMemalign() const {
  if (which() != Instruction::MEMALIGN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasMemalign() {
  if (which() != Instruction::MEMALIGN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::Memalign::Reader Instruction::Reader::getMemalign() const {
  KJ_IREQUIRE((which() == Instruction::MEMALIGN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Memalign>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::Memalign::Builder Instruction::Builder::getMemalign() {
  KJ_IREQUIRE((which() == Instruction::MEMALIGN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Memalign>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setMemalign( ::replay::Memalign::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MEMALIGN);
  ::capnp::_::PointerHelpers< ::replay::Memalign>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::Memalign::Builder Instruction::Builder::initMemalign() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MEMALIGN);
  return ::capnp::_::PointerHelpers< ::replay::Memalign>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptMemalign(
    ::capnp::Orphan< ::replay::Memalign>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::MEMALIGN);
  ::capnp::_::PointerHelpers< ::replay::Memalign>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::Memalign> Instruction::Builder::disownMemalign() {
  KJ_IREQUIRE((which() == Instruction::MEMALIGN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Memalign>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isRealloc() const {
  return which() == Instruction::REALLOC;
}
inline bool Instruction::Builder::isRealloc() {
  return which() == Instruction::REALLOC;
}
inline bool Instruction::Reader::hasRealloc() const {
  if (which() != Instruction::REALLOC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasRealloc() {
  if (which() != Instruction::REALLOC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::Realloc::Reader Instruction::Reader::getRealloc() const {
  KJ_IREQUIRE((which() == Instruction::REALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Realloc>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::Realloc::Builder Instruction::Builder::getRealloc() {
  KJ_IREQUIRE((which() == Instruction::REALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Realloc>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setRealloc( ::replay::Realloc::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::REALLOC);
  ::capnp::_::PointerHelpers< ::replay::Realloc>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::Realloc::Builder Instruction::Builder::initRealloc() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::REALLOC);
  return ::capnp::_::PointerHelpers< ::replay::Realloc>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptRealloc(
    ::capnp::Orphan< ::replay::Realloc>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::REALLOC);
  ::capnp::_::PointerHelpers< ::replay::Realloc>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::Realloc> Instruction::Builder::disownRealloc() {
  KJ_IREQUIRE((which() == Instruction::REALLOC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::Realloc>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isFreeSized() const {
  return which() == Instruction::FREE_SIZED;
}
inline bool Instruction::Builder::isFreeSized() {
  return which() == Instruction::FREE_SIZED;
}
inline bool Instruction::Reader::hasFreeSized() const {
  if (which() != Instruction::FREE_SIZED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasFreeSized() {
  if (which() != Instruction::FREE_SIZED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::FreeSized::Reader Instruction::Reader::getFreeSized() const {
  KJ_IREQUIRE((which() == Instruction::FREE_SIZED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::FreeSized>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::FreeSized::Builder Instruction::Builder::getFreeSized() {
  KJ_IREQUIRE((which() == Instruction::FREE_SIZED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::FreeSized>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setFreeSized( ::replay::FreeSized::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE_SIZED);
  ::capnp::_::PointerHelpers< ::replay::FreeSized>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::FreeSized::Builder Instruction::Builder::initFreeSized() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE_SIZED);
  return ::capnp::_::PointerHelpers< ::replay::FreeSized>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptFreeSized(
    ::capnp::Orphan< ::replay::FreeSized>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::FREE_SIZED);
  ::capnp::_::PointerHelpers< ::replay::FreeSized>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::FreeSized> Instruction::Builder::disownFreeSized() {
  KJ_IREQUIRE((which() == Instruction::FREE_SIZED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::FreeSized>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isKillThread() const {
  return which() == Instruction::KILL_THREAD;
}
inline bool Instruction::Builder::isKillThread() {
  return which() == Instruction::KILL_THREAD;
}
inline bool Instruction::Reader::hasKillThread() const {
  if (which() != Instruction::KILL_THREAD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasKillThread() {
  if (which() != Instruction::KILL_THREAD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::KillThread::Reader Instruction::Reader::getKillThread() const {
  KJ_IREQUIRE((which() == Instruction::KILL_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::KillThread>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::KillThread::Builder Instruction::Builder::getKillThread() {
  KJ_IREQUIRE((which() == Instruction::KILL_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::KillThread>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setKillThread( ::replay::KillThread::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::KILL_THREAD);
  ::capnp::_::PointerHelpers< ::replay::KillThread>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::KillThread::Builder Instruction::Builder::initKillThread() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::KILL_THREAD);
  return ::capnp::_::PointerHelpers< ::replay::KillThread>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptKillThread(
    ::capnp::Orphan< ::replay::KillThread>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::KILL_THREAD);
  ::capnp::_::PointerHelpers< ::replay::KillThread>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::KillThread> Instruction::Builder::disownKillThread() {
  KJ_IREQUIRE((which() == Instruction::KILL_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::KillThread>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Instruction::Reader::isSwitchThread() const {
  return which() == Instruction::SWITCH_THREAD;
}
inline bool Instruction::Builder::isSwitchThread() {
  return which() == Instruction::SWITCH_THREAD;
}
inline bool Instruction::Reader::hasSwitchThread() const {
  if (which() != Instruction::SWITCH_THREAD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instruction::Builder::hasSwitchThread() {
  if (which() != Instruction::SWITCH_THREAD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::replay::SwitchThread::Reader Instruction::Reader::getSwitchThread() const {
  KJ_IREQUIRE((which() == Instruction::SWITCH_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::SwitchThread>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::replay::SwitchThread::Builder Instruction::Builder::getSwitchThread() {
  KJ_IREQUIRE((which() == Instruction::SWITCH_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::SwitchThread>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::setSwitchThread( ::replay::SwitchThread::Reader value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::SWITCH_THREAD);
  ::capnp::_::PointerHelpers< ::replay::SwitchThread>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::replay::SwitchThread::Builder Instruction::Builder::initSwitchThread() {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::SWITCH_THREAD);
  return ::capnp::_::PointerHelpers< ::replay::SwitchThread>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instruction::Builder::adoptSwitchThread(
    ::capnp::Orphan< ::replay::SwitchThread>&& value) {
  _builder.setDataField<Instruction::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Instruction::SWITCH_THREAD);
  ::capnp::_::PointerHelpers< ::replay::SwitchThread>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::replay::SwitchThread> Instruction::Builder::disownSwitchThread() {
  KJ_IREQUIRE((which() == Instruction::SWITCH_THREAD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::replay::SwitchThread>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Batch::Reader::hasInstructions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Batch::Builder::hasInstructions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::replay::Instruction>::Reader Batch::Reader::getInstructions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::replay::Instruction>::Builder Batch::Builder::getInstructions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Batch::Builder::setInstructions( ::capnp::List< ::replay::Instruction>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::replay::Instruction>::Builder Batch::Builder::initInstructions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Batch::Builder::adoptInstructions(
    ::capnp::Orphan< ::capnp::List< ::replay::Instruction>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::replay::Instruction>> Batch::Builder::disownInstructions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::replay::Instruction>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_e5f4176bd4f65e15_
